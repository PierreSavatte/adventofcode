from _2024.day15 import Box, Direction, Warehouse, parse_input
from _2024.day15.part2 import compute_solution
from _2024.tests.test_day15_part1 import TEST_INPUT_2

TEST_INPUT = """#######
#...#.#
#.....#
#..OO@#
#..O..#
#.....#
#######

<vv<<^^<<^^
"""

WAREHOUSE = Warehouse(
    size=(14, 7),
    is_large=True,
    walls=[
        (0, 0),
        (1, 0),
        (2, 0),
        (3, 0),
        (4, 0),
        (5, 0),
        (6, 0),
        (7, 0),
        (8, 0),
        (9, 0),
        (10, 0),
        (11, 0),
        (12, 0),
        (13, 0),
        (0, 1),
        (1, 1),
        (8, 1),
        (9, 1),
        (12, 1),
        (13, 1),
        (0, 2),
        (1, 2),
        (12, 2),
        (13, 2),
        (0, 3),
        (1, 3),
        (12, 3),
        (13, 3),
        (0, 4),
        (1, 4),
        (12, 4),
        (13, 4),
        (0, 5),
        (1, 5),
        (12, 5),
        (13, 5),
        (0, 6),
        (1, 6),
        (2, 6),
        (3, 6),
        (4, 6),
        (5, 6),
        (6, 6),
        (7, 6),
        (8, 6),
        (9, 6),
        (10, 6),
        (11, 6),
        (12, 6),
        (13, 6),
    ],
    boxes=[
        Box((6, 3), (7, 3)),
        Box((8, 3), (9, 3)),
        Box((6, 4), (7, 4)),
    ],
    robot=(10, 3),
    robot_moves=[
        Direction.LEFT,
        Direction.DOWN,
        Direction.DOWN,
        Direction.LEFT,
        Direction.LEFT,
        Direction.UP,
        Direction.UP,
        Direction.LEFT,
        Direction.LEFT,
        Direction.UP,
        Direction.UP,
    ],
)


def test_input_can_be_parsed():
    assert parse_input(TEST_INPUT, large=True) == WAREHOUSE


def test_warehouse_can_be_displayed():
    assert (
        WAREHOUSE.to_str()
        == """
##############
##......##..##
##..........##
##....[][]@.##
##....[]....##
##..........##
##############"""
    )


def test_larger_warehouse_can_be_displayed():
    larger_warehouse = parse_input(TEST_INPUT_2, large=True)
    assert (
        larger_warehouse.to_str()
        == """
####################
##....[]....[]..[]##
##............[]..##
##..[][]....[]..[]##
##....[]@.....[]..##
##[]##....[]......##
##[]....[]....[]..##
##..[][]..[]..[][]##
##........[]......##
####################"""
    )


def test_warehouse_can_be_run_by_the_robot():
    steps = WAREHOUSE.run()

    expected_steps = [
        """
##############
##......##..##
##..........##
##...[][]@..##
##....[]....##
##..........##
##############""",
        """
##############
##......##..##
##..........##
##...[][]...##
##....[].@..##
##..........##
##############""",
        """
##############
##......##..##
##..........##
##...[][]...##
##....[]....##
##.......@..##
##############""",
        """
##############
##......##..##
##..........##
##...[][]...##
##....[]....##
##......@...##
##############""",
        """
##############
##......##..##
##..........##
##...[][]...##
##....[]....##
##.....@....##
##############""",
        """
##############
##......##..##
##...[][]...##
##....[]....##
##.....@....##
##..........##
##############""",
        """
##############
##......##..##
##...[][]...##
##....[]....##
##.....@....##
##..........##
##############""",
        """
##############
##......##..##
##...[][]...##
##....[]....##
##....@.....##
##..........##
##############""",
        """
##############
##......##..##
##...[][]...##
##....[]....##
##...@......##
##..........##
##############""",
        """
##############
##......##..##
##...[][]...##
##...@[]....##
##..........##
##..........##
##############""",
        """
##############
##...[].##..##
##...@.[]...##
##....[]....##
##..........##
##..........##
##############""",
    ]

    for step in expected_steps:
        next(steps)
        assert WAREHOUSE.to_str() == step


def test_more_complex_warehouse_can_be_run():
    warehouse = parse_input(TEST_INPUT_2, large=True)

    for i, _ in enumerate(warehouse.run()):
        ...

    assert (
        warehouse.to_str()
        == """
####################
##[].......[].[][]##
##[]...........[].##
##[]........[][][]##
##[]......[]....[]##
##..##......[]....##
##..[]............##
##..@......[].[][]##
##......[][]..[]..##
####################"""
    )


def test_solution_can_be_computed():
    warehouse = parse_input(TEST_INPUT_2, large=True)
    assert compute_solution(warehouse) == 9021
