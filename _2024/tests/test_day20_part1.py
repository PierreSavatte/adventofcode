import pytest
from _2024.day20 import Map, compute_shortcuts, parse_input
from _2024.day20.part1 import compute_solution

TEST_INPUT = """###############
#...#...#.....#
#.#.#.#.#.###.#
#S#...#.#.#...#
#######.#.#.###
#######.#.#...#
#######.#.###.#
###..E#...#...#
###.#######.###
#...###...#...#
#.#####.#.###.#
#.#...#.#.#...#
#.#.#.#.#.#.###
#...#...#...###
###############
"""

MAP = Map(
    start=(1, 3),
    end=(5, 7),
    cells=[
        "###############",
        "#...#...#.....#",
        "#.#.#.#.#.###.#",
        "#.#...#.#.#...#",
        "#######.#.#.###",
        "#######.#.#...#",
        "#######.#.###.#",
        "###...#...#...#",
        "###.#######.###",
        "#...###...#...#",
        "#.#####.#.###.#",
        "#.#...#.#.#...#",
        "#.#.#.#.#.#.###",
        "#...#...#...###",
        "###############",
    ],
)

PATH = [
    (1, 3),
    (1, 2),
    (1, 1),
    (2, 1),
    (3, 1),
    (3, 2),
    (3, 3),
    (4, 3),
    (5, 3),
    (5, 2),
    (5, 1),
    (6, 1),
    (7, 1),
    (7, 2),
    (7, 3),
    (7, 4),
    (7, 5),
    (7, 6),
    (7, 7),
    (8, 7),
    (9, 7),
    (9, 6),
    (9, 5),
    (9, 4),
    (9, 3),
    (9, 2),
    (9, 1),
    (10, 1),
    (11, 1),
    (12, 1),
    (13, 1),
    (13, 2),
    (13, 3),
    (12, 3),
    (11, 3),
    (11, 4),
    (11, 5),
    (12, 5),
    (13, 5),
    (13, 6),
    (13, 7),
    (12, 7),
    (11, 7),
    (11, 8),
    (11, 9),
    (12, 9),
    (13, 9),
    (13, 10),
    (13, 11),
    (12, 11),
    (11, 11),
    (11, 12),
    (11, 13),
    (10, 13),
    (9, 13),
    (9, 12),
    (9, 11),
    (9, 10),
    (9, 9),
    (8, 9),
    (7, 9),
    (7, 10),
    (7, 11),
    (7, 12),
    (7, 13),
    (6, 13),
    (5, 13),
    (5, 12),
    (5, 11),
    (4, 11),
    (3, 11),
    (3, 12),
    (3, 13),
    (2, 13),
    (1, 13),
    (1, 12),
    (1, 11),
    (1, 10),
    (1, 9),
    (2, 9),
    (3, 9),
    (3, 8),
    (3, 7),
    (4, 7),
    (5, 7),
]


def test_input_can_be_parsed():
    assert parse_input(TEST_INPUT) == MAP


def test_path_can_be_computed():
    assert MAP.compute_path() == PATH


def test_shortcuts_can_be_computed():
    assert compute_shortcuts(PATH) == {
        2: 14,
        4: 14,
        6: 2,
        8: 4,
        10: 2,
        12: 3,
        20: 1,
        36: 1,
        38: 1,
        40: 1,
        64: 1,
    }


def test_solution_can_be_computed():
    assert compute_solution(MAP, min_save=64) == 1
